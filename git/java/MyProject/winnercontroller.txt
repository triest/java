import Exaption.InvalidPointExaption;

//import java.lang.reflect.*;
//import java.lang.reflect.Field;
/**
 * Created by triest on 13.02.2017.
 */
import java.awt.*;

import java.lang.reflect.*;

import Exaption.InvalidPointExaption;

import java.awt.*;




public class WinnerController {

    public Figure getWinner(final Field field) {
        try {
            for (int i = 0; i < 3; i++)
                if (check(field, new Point(i, 0), p -> new Point(p.X, p.Y + 1)))
                    return field.getFigure(new Point(i, 0));

            for (int i = 0; i < 3; i++)
                if (check(field, new Point(0, i), p -> new Point(p.X + 1, p.Y)))
                    return field.getFigure(new Point(0, i));

            if (check(field, new Point(0, 0), p -> new Point(p.X + 1, p.Y + 1)))
                return field.getFigure(new Point(0, 0));

            if (check(field, new Point(0, 2), p -> new Point(p.X + 1, p.Y - 1)))
                return field.getFigure(new Point(1, 1));

        } catch (final InvalidPointExaption e) {
            e.printStackTrace();
        }
        return null;
    }

    public Figure getWinner1(final Field field){
        try {
            for (int i=0;i<3;i++){
                if()
            }

        }catch (final  InvalidPointExaption e){
            e.printStackTrace();
        }
        return null;
    }

    public boolean check(final Field field,
                          final Point currentPoint,
                          final IPointGenerator pointGenerator) {
        final Figure currentFigure;
        final Figure nextFigure;
        final Point nextPoint = pointGenerator.next(currentPoint);
        try {
            currentFigure = field.getFigure(currentPoint);

            if (currentFigure == null)
                return false;

            nextFigure = field.getFigure(nextPoint);
        } catch (final InvalidPointExaption e) {
            return true;
        }

        if (currentFigure != nextFigure)
            return false;

        return check(field, nextPoint, pointGenerator);
    }

    public interface IPointGenerator {
        Point next(final Point point);
    }

}