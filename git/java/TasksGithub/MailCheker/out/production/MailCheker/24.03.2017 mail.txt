import javax.mail.*;
import javax.mail.internet.InternetAddress;
import java.io.IOException;
import java.util.Arrays;
import java.util.Properties;

/**
 * Created by triest on 13.03.2017.
 */


public class Mail {

    String host = "pop3.rambler.ru";
    String username = "6ded6";
    String password = "T8CMF3z0bSkD";
    String provider = "pop3";
    String folder="";

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }
  //показывает, где позиция
    String position;

    Properties props = new Properties();
 //   String provider = "pop3";
    Session session = Session.getDefaultInstance(props, null);
    Store store = session.getStore(provider);
  //  String host;
   // String username ;

    public Store getStore() {
        return store;
    }

    public void setStore(Store store) {
        this.store = store;
    }

    // String password;
  //  String provider;
    Message[] InboxMessages1;

    public Mail() throws NoSuchProviderException {
    }

    public void setInboxMessages(Message[] inboxMessages) {
        this.InboxMessages1 = inboxMessages;
    }



    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFolder() {
        return this.folder;
    }

    public void setFolder(String folder) {
        this.folder = folder;
    }


    //получаем письма, и записываем в массив
    public void GetMessage(String host,String username,String password,Store store,String folder) throws MessagingException, IOException {
        this.setPosition("folder");
        store.connect(host, username, password);
        //   Folder inbox = store.getFolder("INBOX");
        Folder inbox=store.getFolder(folder);
        if (inbox == null) {
            System.out.println("No INBOX");
            System.exit(1);
        }
        inbox.open(Folder.READ_ONLY);
        Message[] messages = inbox.getMessages();
        InboxMessages1=inbox.getMessages();

        for (int i = 0; i < messages.length; i++) {
            //     System.out.println("Message " + (i + 1));
               messages[i].writeTo(System.out);
             System.out.println(messages[i].getSubject());

            System.out.println(messages[i].getFolder());
           System.out.println(messages[i].getContent());
            System.out.println(messages[i].getSubject());
        }
        inbox.close(false);
        store.close();
    }

    public void ShowOpenFolder(String host,String username,String password,Store store,String folder) throws MessagingException, IOException {
        this.setFolder(folder);
        this.setPosition("folder");
        store.connect(host, username, password);
        Folder inbox = store.getFolder(folder);
        if (inbox == null) {
            System.out.println("No"+ folder);
            System.exit(1);
        }
        System.out.println("inbox "+inbox); // тут ошибка inbox pop3 (?)
        inbox.open(Folder.READ_ONLY);
        Message[] messages = inbox.getMessages();
        //    InboxMessages1=inbox.getMessages();
        System.out.println("Folder "+folder);
        for (int i = 0; i < messages.length; i++) {
            //     System.out.println("Message " + (i + 1));
            //    messages[i].writeTo(System.out);
        System.out.println("Show open folder is run");
            System.out.print(i+1+".");
           System.out.print(" "+messages[i].getFrom().toString());

                System.out.println("From: "+Arrays.toString(messages[i].getFrom()));
               System.out.println("To: "+ Arrays.toString(messages[i].getRecipients(Message.RecipientType.TO)));
              System.out.println("Team: "+messages[i].getSubject());
                 System.out.println("Date"+messages[i].getSentDate());


            // System.out.println(messages[i].getContent());
            //    System.out.println(messages[i].getSubject());
        }
        inbox.close(false);
        store.close();
    }


    //показать все сообщения в входящих
    public void displayInboxMessages(String host,String username,String password,Store store,String folder,int i) throws IOException, MessagingException {
        preperaFolder(host,username,password,store,folder);
        this.setPosition("folder");
        store.connect(host, username, password);
        //   Folder inbox = store.getFolder("INBOX");
        Folder inbox=store.getFolder(folder);
        if (inbox == null) {
            System.out.println("No INBOX");
            System.exit(1);
        }
        inbox.open(Folder.READ_ONLY);
        Message[] messages = inbox.getMessages();
        InboxMessages1=inbox.getMessages();
        //     System.out.println("Message " + (i + 1));
        //    messages[i].writeTo(System.out);
        //    System.out.println(messages[i].getSubject());
        //     System.out.println(messages[t].getFolder());
        //    Address[] address=messages[i].getFrom();
   //     System.out.println("From :"+parseAddresses(messages[i].getRecipients(Message.RecipientType.TO)));
     //   System.out.println("Subject :"+messages[i].getSubject());
     //   System.out.println("Folder "+messages[i].getFolder());
      //  System.out.println("Content "+messages[i].getContent());
        //     System.out.println(messages[i].getContent());
        //   System.out.println(messages[t].getSubject());
    for (int t=0;t<messages.length;t++){
        System.out.println("From :"+parseAddresses(messages[t].getRecipients(Message.RecipientType.CC)));
        System.out.println("Subject :"+messages[t].getSubject());
        System.out.println("Date :"+messages[t].getReceivedDate());
    }

        inbox.close(false);
        store.close();
    }


    public void preperaFolder(String host,String username,String password,Store store,String folder) throws MessagingException, IOException {
        store.connect(host, username, password);
     //   this.setPosition("m");
        Folder inbox = store.getFolder(folder);
        if (inbox == null) {
            System.out.println("No" + folder);
            System.exit(1);
        }
        inbox.open(Folder.READ_ONLY);
        Message[] messages = inbox.getMessages();
        //    InboxMessages1=inbox.getMessages();
        // System.out.println("Folder "+folder);
        for (int i = 0; i < messages.length; i++) {
            //     System.out.println("Message " + (i + 1));
            //    messages[i].writeTo(System.out);

            //System.out.println(" "+messages[i].getFrom().toString());
            //   System.out.println("To "+ Arrays.toString(messages[i].getRecipients(Message.RecipientType.CC)));
            //  System.out.println("To "+ Arrays.toString(messages[i].getRecipients(Message.RecipientType.BCC)));
            //     System.out.println("From: "+Arrays.toString(messages[i].getFrom()));
            //    System.out.println("To: "+ Arrays.toString(messages[i].getRecipients(Message.RecipientType.TO)));
            //   System.out.println("Team: "+messages[i].getSubject());
            //       System.out.println(" "+messages[i].getReceivedDate());

            // System.out.println(messages[i].getContent());
            //    System.out.println(messages[i].getSubject());
        }
        inbox.close(false);
        store.close();
    }

    public void displayMessage(String host,String username,String password,Store store,String folder,int i) throws IOException, MessagingException {
        this.setPosition("letter");
        preperaFolder(host,username,password,store,folder);

        store.connect(host, username, password);
        //   Folder inbox = store.getFolder("INBOX");
        Folder inbox=store.getFolder(folder);
        if (inbox == null) {
            System.out.println("No INBOX");
            System.exit(1);
        }
        inbox.open(Folder.READ_ONLY);
        Message[] messages = inbox.getMessages();
        InboxMessages1=inbox.getMessages();
        //     System.out.println("Message " + (i + 1));
        //    messages[i].writeTo(System.out);
        //    System.out.println(messages[i].getSubject());
        //     System.out.println(messages[t].getFolder());
        //    Address[] address=messages[i].getFrom();
        System.out.println("From :"+parseAddresses(messages[i].getRecipients(Message.RecipientType.TO)));
        System.out.println("Subject :"+messages[i].getSubject());
        System.out.println("Folder "+messages[i].getFolder());
        System.out.println("Content "+messages[i].getContent());
        //     System.out.println(messages[i].getContent());
        //   System.out.println(messages[t].getSubject());

        inbox.close(false);
        store.close();
    }


    private String parseAddresses(Address[] address) {
        String listOfAddress = "";
        if ((address == null) || (address.length < 1))
            return null;
        if (!(address[0] instanceof InternetAddress))
            return null;

        for (int i = 0; i < address.length; i++) {
            InternetAddress internetAddress =
                    (InternetAddress) address[0];
            listOfAddress += internetAddress.getAddress();
        }
        return listOfAddress;
    }
}



